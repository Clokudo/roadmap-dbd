function formatSeconds(t, e=!0) {
    var a = Math.floor(t / 86400)
      , s = Math.floor(t % 86400 / 3600)
      , i = Math.floor(t % 86400 % 3600 / 60);
    return (a > 0 ? a + (a > 1 ? " days, " : " day, ") : "") + (e || !e && s > 0 ? String(s).padStart(2, "0") + ":" : "") + String(i).padStart(2, "0") + ":" + String(Math.ceil(t % 86400 % 3600 % 60)).padStart(2, "0")
}
function filterItems(t, e) {
    $(t).closest(".characters").parent().parent().find(".items .item").hide().filter(e || "*").show()
}
function setMenuSmall() {
    $(window).width() > 1600 && !$("#menu").data("alwayssmall") ? $("#menu").removeClass("small") : $("#menu").addClass("small")
}
function getTopStats(t) {
    $.getJSON("/api/topstats?stat=" + t + "&limit=" + (topStatsLimit || 15), function(t) {
        $("#topstats table").empty(),
        $.each(t, function(t, e) {
            $("#topstats table").append($("<tr />").append($('<td width="70%" />').append($("<a />", {
                href: "/playerstats/" + e.steamid,
                target: "_blank",
                html: e.persona
            }).css("color", e.fancy ? "#" + e.fancy : "inherit")), $("<td />", {
                text: parseInt(e.value).toLocaleString()
            })))
        })
    })
}
if ($("#menutoggle").on("click", function() {
    $(this).toggleClass("active"),
    $("#menu").toggleClass("show")
}),
$(".dropdown .selected").on("click", function(t) {
    t.stopPropagation();
    var e = $(this).parent().find(".list").toggleClass("show").css("max-height", ($(this).parent().parent().hasClass("characters") ? $(this).parent().parent().parent().height() : $("#content").offset() ? $("#content").offset().height : 0) - $(this).offset().top - $(this).height());
    $("body").one("click", function() {
        $(e).removeClass("show")
    })
}),
$(".dropdown a, .dropdown span").on("click", function(t) {
    $(this).closest(".dropdown").find(".selected").text($(this).text()),
    $(this).closest(".list").find("a, span").removeClass("active").eq($(this).index()).addClass("active")
}),
$("#archives .levels span").on("click", function() {
    $("#archives .levels span, #archives .level").removeClass("active show"),
    $(this).addClass("active");
    var t = $("#archives .level").eq($(this).index()).addClass("show");
    $("#archives .wrapper").css({
        height: $(t).data("height"),
        width: $(t).data("width")
    })
}),
window.innerWidth < (parseInt(Math.max.apply(Math, $.map($("#archives .level"), function(t) {
    return parseInt($(t).data("width"))
}))) || 0)) {
    var scale = window.innerWidth < 480 ? 2.5 : 2;
    $.each($("#archives .level"), function(t, e) {
        $(e).data("height", $(e).data("height") / scale),
        $(e).data("width", $(e).data("width") / scale)
    }),
    $.each($("#archives .node"), function(t, e) {
        $(e).css("left", parseInt($(e).css("left")) / scale + "px"),
        $(e).css("top", parseInt($(e).css("top")) / scale + "px")
    }),
    $.each($("#archives line"), function(t, e) {
        $(e).attr("x1", parseInt($(e).attr("x1")) / scale),
        $(e).attr("y1", parseInt($(e).attr("y1")) / scale),
        $(e).attr("x2", parseInt($(e).attr("x2")) / scale),
        $(e).attr("y2", parseInt($(e).attr("y2")) / scale)
    }),
    $("#archives .levels span.active").click()
}
$(".characters .dropdown .selected").on("click", function() {
    $(this).closest(".characters").find(".list").not($(this).next()).removeClass("show")
}),
$(".characters .dropdown span").on("click", function() {
    $.each($(this).closest(".characters").find(".selected").not($(this).closest(".dropdown").find(".selected")), function(t, e) {
        $(e).text($(e).data("default"))
    }),
    $(this).closest(".characters").find(".active").not($(this)).removeClass("active"),
    $(this).closest(".characters").find(".showall").show(),
    $(this).data("character") ? filterItems($(this), '[data-character="' + $(this).data("character") + '"]') : filterItems($(this), '[data-role="' + $(this).data("role") + '"]:not([data-character])')
}),
$(".characters > span").on("click", function() {
    $.each($(this).parent().find(".selected"), function(t, e) {
        $(e).text($(e).data("default"))
    }),
    $(this).data("filter") ? $(this).closest(".characters").find(".showall").show() : $(this).closest(".characters").find(".showall").hide(),
    filterItems($(this), $(this).data("filter") || "*")
}),
$(".characters .search").on("keyup", function() {
    $.each($(this).parent().find(".dropdown .selected"), function(t, e) {
        $(e).html($(e).data("default"))
    }),
    $(this).val().replace(/ /g, "").length > 1 ? filterItems($(this), '[data-name*="' + $(this).val().toLowerCase() + '"]') : $(this).parent().find(".dropdown:first-child .list *:first-child").click()
}),
$("#cosmetics .item").click(function() {
    $("#overlay .inner").empty().append($("<h2 />", {
        text: $(this).find("h5").text()
    }), $("<div />", {
        class: "images"
    }), $("<div />", {
        class: "description"
    }).append($("<p />", {
        html: $(this).data("description")
    }), $("<p />", {
        html: $(this).find("small").html()
    }))),
    "outfit" == $(this).data("type") ? $.each($(this).data("items"), function(t, e) {
        $("#overlay .images").append($("<div />").append($("<img />", {
            src: "/dbdassets/cosmetics/" + e + ".png"
        })))
    }) : $("#overlay .images").append($("<img />", {
        src: $(this).find("img").attr("src")
    })),
    $("#overlay").addClass("darker").addClass("show"),
    $("#overlay").one("click", function() {
        $(this).removeClass("show").removeClass("darker")
    })
}),
$("#journals .journal span").on("click", function() {
    $("#journals .entry span").removeClass("show"),
    $('#journals .entry span[data-vignette="' + $(this).data("id") + '"]').addClass("show").eq(0).click()
}),
$("#journals .entry span").on("click", function() {
    $("#journals audio").each(function() {
        this.pause()
    }),
    $("#journals .entries div").hide(),
    $('#journals .entries div[data-entry="' + $(this).data("entry") + '"]').show()
}),
$("#patchnotes .menu span").on("click", function() {
    $(this).hasClass("active") || ($("#patchnotes .menu span").removeClass("active"),
    $(this).addClass("active"),
    $("#patchnotes .version").removeClass("show"),
    $('#patchnotes .version[data-version="' + $(this).data("version") + '"]').addClass("show"))
});
var selectedperks = [];
$("#perkicons .item").click(function() {
    if (window.event.ctrlKey)
        -1 == selectedperks.indexOf($(this).data("id")) ? ($(this).addClass("active"),
        selectedperks.push($(this).data("id"))) : ($(this).removeClass("active"),
        selectedperks.splice(selectedperks.indexOf($(this).data("id")), 1));
    else {
        if (window.event.shiftKey)
            return $(this).removeClass("active"),
            selectedperks.splice(selectedperks.indexOf($(this).data("id")), 1),
            $(this).find("input[type=file]").val(null),
            $(this).find('input[name^="perkimage"]').val(null),
            $(this).find('input[name^="perkoptions"]').val(1),
            $(this).find(".preview").css("background-image", ""),
            $(this).find(".border").removeAttr("style"),
            $(this).find(".icon").css("opacity", 1),
            !1;
        if (window.event.altKey) {
            if (0 == $(this).find("input[type=file]")[0].files.length)
                return;
            var t = parseInt($(this).find('input[name^="perkoptions"]').val()) + 1;
            $(this).find('input[name^="perkoptions"]').val(4 == t ? t = 0 : t),
            $(this).find(".border").css("opacity", 1 == t || 3 == t ? 1 : 0),
            $(this).find(".icon").css("opacity", 1 == t || 2 == t ? 1 : 0)
        } else
            $(this).find("input[type=file]")[0].click()
    }
}),
$("#perkicons input[type=file]").change(function() {
    var t = $(this).parent().find(".preview")
      , e = $(this)
      , a = new FileReader;
    a.onload = function(a) {
        $(t).css("background-image", "url(" + a.target.result + ")"),
        $.each(selectedperks, function(t, s) {
            $('.item[data-id="' + s + '"]').removeClass("active"),
            $('.item[data-id="' + s + '"] input[type=file]').replaceWith($(e).clone()),
            $('.item[data-id="' + s + '"] .preview').css("background-image", "url(" + a.target.result + ")")
        }),
        selectedperks = []
    }
    ,
    "image/png" == this.files[0].type ? a.readAsDataURL(this.files[0]) : $(this).val(null)
}),
$("#perkicons .instructions button").click(function() {
    var t = $(this).data("role") || !1;
    selectedperks = [],
    $(".item").removeClass("active"),
    $.each($(".item"), function(e, a) {
        (!t || t && $(a).data("role") == t) && ($(this).addClass("active"),
        selectedperks.push($(this).data("id")))
    }),
    $('.item[data-id="' + selectedperks[selectedperks.length - 1] + '"]').click()
}),
$("#perkicons button[name=create]").click(function() {
    var t = [];
    $.each($("#perkicons input[type=file]"), function(e, a) {
        1 == a.files.length && ($(a).parent().find('input[name^="perkimage"]').val(a.files[0].name),
        t.indexOf(a.files[0].name) > -1 ? $(a).val(null) : t.push(a.files[0].name))
    }),
    0 != t.length && ($("#perkicons input[name=wut]").val(1),
    $("#perkicons").submit(),
    $(this).attr("disabled", !0).attr("title", "Please wait for download to finish."),
    setTimeout(function() {
        $("#perkicons button[name=create]").removeAttr("disabled").removeAttr("title")
    }, 15e3))
}),
$("#playerstats .compare").on("enter blur", function() {
    var t = $(this).val().trim();
    t.match(/[a-zA-Z0-9_-]{4,}|7656119[0-9]{10}/) && $.getJSON("/?json=profile&profile=" + t, function(t) {
        1 == t.result && (window.location.href = window.location.href.split("?")[0] + "/" + t.steamid)
    })
}),
$("#shrine.randomiser .button").on("click", function() {
    $.get("/api/randomperks?role=" + $(this).data("role"), function(t) {
        $("#shrine.randomiser .perks").empty();
        var e = 1;
        $.each(t, function(t, a) {
            $("#shrine.randomiser .perks").append($("<div />", {
                class: "perk p" + e++
            }).append($("<img />", {
                src: "/dbdassets/perks/" + a.image.split("/").pop()
            }), $("<span />", {
                text: a.name
            })))
        })
    })
}),
$('#shrine.randomiser .button[data-role="survivor"]').click(),
$("#rift .arrow").on("click", function() {
    var t = $(this).data("direction")
      , e = $("#rift .page.show").index();
    ("back" == t && e > 0 || "forward" == t && e < $("#rift .page").length - 1) && (e = "back" == t ? --e : ++e,
    $("#rift .pages").css("transform", "translate(-" + 100 * e + "%)"),
    $("#rift .page").removeClass("show").eq(e).addClass("show"))
}),
$(".dropdown.statshistory a").on("click", function(t) {
    if (0 != $(this).index()) {
        t.preventDefault();
        var e = $(this).closest(".dropdown").data("steamid")
          , a = $(this).data("stat");
        $.getJSON("?view=profile&steamid=" + e + "&stat=" + a + "&json", function(t) {
            $("table.stats .stat").text(a),
            $("table.stats tr:not(:first-child)").remove(),
            $.each(t, function(t, s) {
                $("table.stats").append($("<tr />", {
                    class: "middle",
                    style: 0 == t ? "border-bottom: 1px solid #d01e1ea6" : ""
                }).append($("<td />", {
                    text: parseInt(s.survivor_rank).toLocaleString()
                }), $("<td />", {
                    text: parseInt(s.killer_rank).toLocaleString()
                }), $("<td />", {
                    text: parseInt(s.bloodpoints).toLocaleString()
                }), $("<td />", {
                    text: parseInt(s.escaped).toLocaleString()
                }), $("<td />", {
                    text: parseInt(s.saved).toLocaleString()
                }), $("<td />", {
                    text: parseInt(s.killed).toLocaleString()
                }), $("<td />", {
                    text: parseInt(s.sacrificed).toLocaleString()
                }), $("<td />", {
                    text: parseInt(s.skillchecks).toLocaleString()
                }), $("<td />", {
                    text: parseInt(s.gensrepaired).toLocaleString()
                }), $("<td />", {
                    text: parseInt(s.survivorshealed).toLocaleString()
                }), $("<td />", {
                    text: parseInt(s[a]).toLocaleString()
                }), $("<td />", {
                    text: parseInt(s.playtime / 60).toLocaleString()
                }), $("<td />", {
                    text: new Date(1e3 * s.updated_at).toLocaleString("en", {
                        month: "2-digit",
                        day: "2-digit",
                        year: "numeric",
                        hour: "2-digit",
                        minute: "numeric",
                        second: "numeric",
                        hour12: !0
                    })
                }), $("<td />", {
                    align: "right"
                }).append($("<a />", {
                    class: "button",
                    href: "?view=statshistory&steamid=" + e + (0 != t ? "&time=" + s.updated_at : ""),
                    target: "_blank",
                    text: "View"
                }))))
            })
        })
    }
}),
$(".dropdown.topstats a").on("click", function(t) {
    t.preventDefault(),
    getTopStats($(this).data("stat"))
}),
$.each($("[data-counter]"), function(t, e) {
    e.timer = setInterval(function() {
        var t = $(e).data("counter");
        $(e).text(formatSeconds(t, !1)),
        $(e).data("counter", --t),
        t <= 0 && clearTimeout(e.timer)
    }, 1e3)
}),
$(window).ready(setMenuSmall).resize(setMenuSmall);
